#!/usr/bin/env python3
"""
Script para visualizar estad√≠sticas del √≠ndice de forma gr√°fica en consola.
"""

import os
import sys
import ZODB
import ZODB.FileStorage
from collections import Counter
from indexar import IndiceOrdenado


def mostrar_estadisticas():
    """Muestra estad√≠sticas detalladas del √≠ndice."""

    archivo_db = "index/indice.fs"

    if not os.path.exists(archivo_db):
        print("‚ùå Error: No existe el √≠ndice")
        print("   Ejecuta 'python indexar.py' o 'make index' primero\n")
        sys.exit(1)

    # Abrir el √≠ndice
    storage = ZODB.FileStorage.FileStorage(archivo_db, read_only=True)
    db = ZODB.DB(storage)
    connection = db.open()
    root = connection.root()
    indice = root.indice
    indice.__class__ = IndiceOrdenado

    print("\n" + "=" * 70)
    print("üìä ESTAD√çSTICAS DETALLADAS DEL √çNDICE")
    print("=" * 70)

    # Estad√≠sticas b√°sicas
    stats = indice.obtener_estadisticas()
    print(f"\nüìà Resumen:")
    print(f"   ‚Ä¢ T√©rminos √∫nicos: {stats['total_terminos']:,}")
    print(f"   ‚Ä¢ Documentos: {stats['total_documentos']}")

    # Distribuci√≥n por letra inicial
    print(f"\nüî§ Distribuci√≥n por letra inicial:")
    contador_letras = Counter()
    for termino in indice.indice.keys():
        if termino and termino[0].isalpha():
            contador_letras[termino[0]] += 1

    max_count = max(contador_letras.values()) if contador_letras else 1
    for letra in sorted(contador_letras.keys()):
        count = contador_letras[letra]
        barra = "‚ñà" * int((count / max_count) * 40)
        print(f"   {letra}: {barra} {count:>4}")

    # T√©rminos m√°s frecuentes (en m√°s documentos)
    print(f"\nüìö T√©rminos que aparecen en m√°s documentos:")
    freq_terminos = []
    for termino, doc_tree in indice.indice.items():
        num_docs = len(doc_tree)
        freq_terminos.append((termino, num_docs))

    freq_terminos.sort(key=lambda x: x[1], reverse=True)
    for termino, num_docs in freq_terminos[:15]:
        print(f"   ‚Ä¢ '{termino}': {num_docs} documentos")

    # T√©rminos m√°s largos
    print(f"\nüìè T√©rminos m√°s largos:")
    terminos_largos = sorted(indice.indice.keys(), key=len, reverse=True)[:10]
    for i, termino in enumerate(terminos_largos, 1):
        print(f"   {i}. '{termino}' ({len(termino)} caracteres)")

    # Distribuci√≥n por longitud
    print(f"\nüìä Distribuci√≥n por longitud de t√©rmino:")
    contador_longitud = Counter()
    for termino in indice.indice.keys():
        longitud = len(termino)
        if longitud <= 20:  # Agrupar largos
            contador_longitud[longitud] += 1
        else:
            contador_longitud[">20"] += 1

    max_count = max(contador_longitud.values()) if contador_longitud else 1
    for longitud in sorted(contador_longitud.keys(), key=lambda x: x if isinstance(x, int) else 21):
        count = contador_longitud[longitud]
        barra = "‚ñà" * int((count / max_count) * 40)
        print(f"   {str(longitud):>3}: {barra} {count:>4}")

    # Documentos con m√°s t√©rminos √∫nicos
    print(f"\nüìÑ T√©rminos √∫nicos por documento:")
    terminos_por_doc = Counter()
    for termino, doc_tree in indice.indice.items():
        for doc_id in doc_tree.keys():
            terminos_por_doc[doc_id] += 1

    for doc_id, count in terminos_por_doc.most_common():
        nombre_doc = indice.documentos[doc_id]
        print(f"   ‚Ä¢ {nombre_doc}: {count:,} t√©rminos √∫nicos")

    # Tama√±o del √≠ndice
    print(f"\nüíæ Tama√±o en disco:")
    tamano = os.path.getsize(archivo_db)
    tamano_mb = tamano / (1024 * 1024)
    print(f"   ‚Ä¢ Archivo: {tamano:,} bytes ({tamano_mb:.2f} MB)")

    # Cerrar conexi√≥n
    try:
        connection.close()
    except Exception:
        pass
    db.close()

    print("\n" + "=" * 70)
    print("‚úÖ An√°lisis completado")
    print("=" * 70 + "\n")


if __name__ == "__main__":
    mostrar_estadisticas()
