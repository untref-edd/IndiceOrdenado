#!/usr/bin/env python3
"""
Interfaz CLI para b√∫squedas con comodines en el √≠ndice ordenado.
Soporta b√∫squedas exactas, prefijos, sufijos y patrones con comodines.
"""

import os
import sys
from typing import Dict, List
import ZODB
import ZODB.FileStorage
from indexar import IndiceOrdenado  # Importar la clase actualizada


class BuscadorCLI:
    """Interfaz de l√≠nea de comandos para b√∫squedas."""
    
    def __init__(self, archivo_db: str = 'index/indice.fs'):
        """
        Inicializa el buscador con la base de datos ZODB.
        
        Args:
            archivo_db: Archivo de base de datos ZODB
        """
        if not os.path.exists(archivo_db):
            print(f"Error: No existe el √≠ndice '{archivo_db}'")
            print("Ejecuta 'python indexar.py' o 'make index' primero para crear el √≠ndice.")
            sys.exit(1)
        
        # Abrir la base de datos ZODB
        self.storage = ZODB.FileStorage.FileStorage(archivo_db, read_only=True)
        self.db = ZODB.DB(self.storage)
        self.connection = self.db.open()
        self.root = self.connection.root()
        
        if not hasattr(self.root, 'indice'):
            print("Error: El √≠ndice no est√° inicializado en la base de datos.")
            sys.exit(1)
        
        self.indice = self.root.indice
        # Forzar que use la clase actualizada
        self.indice.__class__ = IndiceOrdenado
    
    def cerrar(self):
        """Cierra la conexi√≥n a la base de datos."""
        try:
            self.connection.close()
        except Exception:
            pass  # Ignorar errores de cierre en read-only
        self.db.close()
    
    def mostrar_estadisticas(self):
        """Muestra estad√≠sticas del √≠ndice."""
        stats = self.indice.obtener_estadisticas()
        print("\n" + "="*60)
        print("ESTAD√çSTICAS DEL √çNDICE")
        print("="*60)
        print(f"T√©rminos √∫nicos indexados: {stats['total_terminos']}")
        print(f"Documentos en el corpus: {stats['total_documentos']}")
        print(f"\nDocumentos indexados:")
        for doc in sorted(stats['documentos']):
            print(f"  ‚Ä¢ {doc}")
        print("="*60)
    
    def formatear_resultados(self, resultados: Dict[str, List[str]], 
                            titulo: str = "RESULTADOS"):
        """
        Formatea y muestra los resultados de b√∫squeda.
        
        Args:
            resultados: Diccionario {t√©rmino -> lista de documentos}
            titulo: T√≠tulo a mostrar
        """
        if not resultados:
            print("\n‚ùå No se encontraron resultados.\n")
            return
        
        print(f"\n{'='*60}")
        print(titulo)
        print('='*60)
        
        # Contar documentos √∫nicos
        docs_unicos = set()
        for docs in resultados.values():
            docs_unicos.update(docs)
        
        print(f"T√©rminos encontrados: {len(resultados)}")
        print(f"Documentos √∫nicos: {len(docs_unicos)}")
        print()
        
        # Mostrar resultados por t√©rmino
        for termino in sorted(resultados.keys()):
            docs = resultados[termino]
            docs_str = ', '.join(sorted(set(docs)))
            print(f"  üìñ '{termino}' ‚Üí [{docs_str}]")
        
        print('='*60 + '\n')
    
    def buscar_exacto(self, termino: str):
        """B√∫squeda exacta de un t√©rmino."""
        print(f"\nüîç Buscando t√©rmino exacto: '{termino}'")
        
        docs = self.indice.buscar_exacto(termino)
        
        if not docs:
            print(f"\n‚ùå El t√©rmino '{termino}' no se encuentra en el √≠ndice.\n")
        else:
            docs_str = ', '.join(sorted(set(docs)))
            print(f"\n‚úÖ Encontrado en: [{docs_str}]\n")
    
    def buscar_prefijo(self, prefijo: str):
        """B√∫squeda por prefijo."""
        print(f"\nüîç Buscando t√©rminos que empiecen con: '{prefijo}'")
        
        resultados = self.indice.buscar_prefijo(prefijo)
        self.formatear_resultados(resultados, 
                                  f"T√âRMINOS QUE EMPIEZAN CON '{prefijo}'")
    
    def buscar_sufijo(self, sufijo: str):
        """B√∫squeda por sufijo."""
        print(f"\nüîç Buscando t√©rminos que terminen con: '{sufijo}'")
        
        resultados = self.indice.buscar_sufijo(sufijo)
        self.formatear_resultados(resultados, 
                                  f"T√âRMINOS QUE TERMINAN CON '{sufijo}'")
    
    def buscar_comodin(self, patron: str):
        """B√∫squeda con comodines."""
        print(f"\nüîç Buscando patr√≥n: '{patron}'")
        print("   (usa * para cualquier secuencia, ? para un car√°cter)")
        
        resultados = self.indice.buscar_comodin(patron)
        self.formatear_resultados(resultados, 
                                  f"T√âRMINOS QUE COINCIDEN CON '{patron}'")
    
    def buscar_comodin_medio(self, patron: str):
        """B√∫squeda con comod√≠n en el medio (prefijo*sufijo)."""
        print(f"\nüîç Buscando patr√≥n con * en el medio: '{patron}'")
        print("   (Usando ambos √°rboles B+ con intersecci√≥n AND)")

        resultados = self.indice.buscar_comodin_medio(patron)
        self.formatear_resultados(resultados,
                                  f"T√âRMINOS QUE COINCIDEN CON '{patron}'")
    
    def mostrar_menu(self):
        """Muestra el men√∫ principal."""
        print("\n" + "="*60)
        print("BUSCADOR DE √çNDICE ORDENADO (√Årboles B+ / ZODB)")
        print("="*60)
        print("Opciones de b√∫squeda:")
        print("  0 - B√∫squeda exacta")
        print("  1 - B√∫squeda por prefijo (ej: 'hobbi*')")
        print("  2 - B√∫squeda por sufijo (ej: '*ci√≥n')")
        print("  3 - B√∫squeda con comodines (ej: 'h?bbit', 'ho*')")
        print("  4 - B√∫squeda con * en medio (ej: 'ca*do', 'ho*bit')")
        print("  5 - Ver estad√≠sticas del √≠ndice")
        print("  6 - Salir")
        print("="*60)
    
    def ejecutar(self):
        """Ejecuta el bucle principal del CLI."""
        self.mostrar_estadisticas()

        while True:
            try:
                self.mostrar_menu()
                opcion = input("\nSelecciona una opci√≥n (0-6): ").strip()

                if opcion == '6':
                    print("\nüëã ¬°Hasta luego!\n")
                    break

                elif opcion == '5':
                    self.mostrar_estadisticas()

                elif opcion == '0':
                    termino = input("\nIngresa el t√©rmino a buscar: ").strip()
                    if termino:
                        self.buscar_exacto(termino)

                elif opcion == '1':
                    prefijo = input("\nIngresa el prefijo (sin *): ").strip()
                    if prefijo:
                        self.buscar_prefijo(prefijo)

                elif opcion == '2':
                    sufijo = input("\nIngresa el sufijo (sin *): ").strip()
                    if sufijo:
                        self.buscar_sufijo(sufijo)

                elif opcion == '3':
                    prompt = "\nIngresa el patr√≥n "
                    prompt += "(* = cualquier secuencia, ? = un car√°cter): "
                    patron = input(prompt).strip()
                    if patron:
                        self.buscar_comodin(patron)

                elif opcion == '4':
                    prompt = "\nIngresa el patr√≥n con * en medio "
                    prompt += "(ej: ca*do): "
                    patron = input(prompt).strip()
                    if patron:
                        self.buscar_comodin_medio(patron)

                else:
                    print("\n‚ùå Opci√≥n no v√°lida. Intenta de nuevo.\n")

            except KeyboardInterrupt:
                print("\n\nüëã B√∫squeda cancelada. ¬°Hasta luego!\n")
                break
            except EOFError:
                print("\n\nüëã ¬°Hasta luego!\n")
                break
            except Exception as e:
                print(f"\n‚ùå Error: {e}\n")


def main():
    """Funci√≥n principal."""
    archivo_db = 'index/indice.fs'
    
    buscador = BuscadorCLI(archivo_db)
    
    try:
        buscador.ejecutar()
    finally:
        buscador.cerrar()


if __name__ == '__main__':
    main()
